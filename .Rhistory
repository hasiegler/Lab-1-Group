knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE)
library(tidyverse)
qq_plot_random <- function(input_vec) {
#sort the input vector
input_vec <- sort(input_vec)
#randomly generate new vector with length, mean, and standard deviation of the input vector
random_vec <- rnorm(length(input_vec),
mean(input_vec),
sd(input_vec))
#sort the randomly generated vector
random_vec <- sort(random_vec)
#combine the columns of both vectors and create tibble
df <- cbind(input_vec, random_vec) %>%
as_tibble()
#plot the tibble in scatter plot with y = x reference line
p <- df %>%
ggplot() +
geom_point(aes(x = random_vec, y = input_vec)) +
geom_abline(slope = 1, intercept = 0) +
labs(x = "Randomly Generated Values",
y = "Values of Input Vector",
title = "Q-Q Plot")
return(p)
}
head(mtcars)
#use the mpg variable from the mtcars data set to create the qq plot
qq_plot_random(mtcars$mpg)
knitr::opts_chunk$set(echo = TRUE,
message = FALSE,
warning = FALSE)
library(tidyverse)
library(here)
library(lubridate)
library(boot)
oscars <- read_csv(here("Oscars-demographics-DFE.csv"))
oscars <- read_csv(here("Oscars-demographics-DFE.csv"))
oscars %>%
distinct(movie, award) %>%
group_by(movie) %>%
count(sort = TRUE) %>%
filter(n == 3) %>%
pull(movie)
knitr::opts_chunk$set(echo = TRUE)
big5 <- oscars %>%
group_by(movie) %>%
distinct(award) %>%
count(movie) %>%
arrange(desc(n))
head(big5)
big5 <- oscars %>%
group_by(movie) %>%
distinct(award) %>%
count(movie) %>%
arrange(desc(n))
head(big5)
name <- oscars %>%
distinct(person, .keep_all = TRUE) %>%
filter(award == "Best Actress") %>%
pull(person) %>%
word(1) %>%
table() %>%
sort(decreasing = TRUE)
head(name)
oscars %>%
filter(award == "Best Actress") %>%
distinct(person) %>%
separate(person, c("first", "last"), sep = " ") %>%
group_by(first) %>%
count(sort = TRUE) %>%
as_tibble() %>%
slice_max(n) %>%
pull(first)
oscars$birthplace <- gsub("New York City", 'New York City, Ny', oscars$birthplace)
state <- oscars %>%
distinct(person, .keep_all = TRUE) %>%
pull(birthplace) %>%
word(-1) %>%
table() %>%
sort(decreasing = TRUE)
head(state)
oscars %>%
distinct(person, birthplace) %>%
separate(birthplace, into = c("city", "state"), ", ") %>%
mutate(state = case_when(city == "New York City" ~ "Ny",
TRUE ~ state)) %>%
group_by(state) %>%
count(sort = TRUE) %>%
as_tibble() %>%
slice_max(n)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(modelr)
oscars <- read_csv("Oscars-demographics-DFE.csv")
head(oscars)
big5 <- oscars %>%
group_by(movie) %>%
distinct(award) %>%
count(movie) %>%
arrange(desc(n))
head(big5)
name <- oscars %>%
distinct(person, .keep_all = TRUE) %>%
filter(award == "Best Actress") %>%
pull(person) %>%
word(1) %>%
table() %>%
sort(decreasing = TRUE)
head(name)
oscars$birthplace <- gsub("New York City", 'New York City, Ny', oscars$birthplace)
state <- oscars %>%
distinct(person, .keep_all = TRUE) %>%
pull(birthplace) %>%
word(-1) %>%
table() %>%
sort(decreasing = TRUE)
head(state)
View(oscars)
head(state)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(modelr)
oscars <- read_csv("Oscars-demographics-DFE.csv")
head(oscars)
knitr::opts_chunk$set(echo = TRUE,
message = FALSE,
warning = FALSE)
oscars <- read_csv(here("Oscars-demographics-DFE.csv"))
library(tidyverse)
library(here)
library(lubridate)
library(boot)
oscars <- read_csv(here("Oscars-demographics-DFE.csv"))
knitr::opts_chunk$set(echo = TRUE,
message = FALSE,
warning = FALSE)
library(tidyverse)
library(here)
library(lubridate)
library(boot)
oscars <- read_csv(here("Oscars-demographics-DFE.csv"))
oscars %>%
distinct(movie, award) %>%
group_by(movie) %>%
count(sort = TRUE) %>%
filter(n == 3) %>%
pull(movie)
name <- oscars %>%
distinct(person, .keep_all = TRUE) %>%
filter(award == "Best Actress") %>%
pull(person) %>%
word(1) %>%
table() %>%
sort(decreasing = TRUE)
head(name)
oscars$birthplace <- gsub("New York City",
'New York City, Ny',
oscars$birthplace)
state <- oscars %>%
distinct(person, .keep_all = TRUE) %>%
pull(birthplace) %>%
word(-1) %>%
table() %>%
sort(decreasing = TRUE)
head(state)
oscars_linear_data <- oscars %>%
#filter the data so that we only have awards based on gender
filter(award != "Best Director") %>%
#create binary variable equal to 1 is person is male and 0 if female
mutate(male = case_when(award == "Best Actress" |
award == "Best Supporting Actress" ~ 0,
award == "Best Actor" |
award == "Best Supporting Actor" ~ 1))
oscars_linear_data_dates <- oscars_linear_data %>%
#create a new date of birth variable from the original character date variable
mutate(date_of_birth2 = dmy(date_of_birth),
year = year(date_of_birth2))
#the dmy() function read in many of the birth years in the 2000s when they should have been in 1900s
oscars_dates_incorrect <- oscars_linear_data_dates %>%
#filter to find dates that were read incorrectly
filter(year > 2000) %>%
mutate(month = month(date_of_birth2),
day = day(date_of_birth2),
#change the birth year so that it is in 1900s
year = year - 100,
date_of_birth2 = as.Date(paste(year, month, day, sep = "-"))) %>%
select(-year, - month, - day)
oscars_dates_correct <- oscars_linear_data_dates %>%
#filter to find dates that were read in correctly
filter(year < 2000) %>%
select(-year)
#combine the data sets of the dates that were read correctly with the fixed dates of those that were read incorrectly
oscars_correct <- rbind(oscars_dates_correct, oscars_dates_incorrect)
oscars_correct <- oscars_correct %>%
#make a variable that has the date of award on February 1 of the year of the award
mutate(date_of_award = as.Date(paste(year_of_award, 2, 1, sep = "-")),
#create age variable, which is difference between the date the award was received and the birth date of the winner
age = time_length(difftime(date_of_award, date_of_birth2), "years"))
mean(oscars_correct$age)
